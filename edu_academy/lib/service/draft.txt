  fiCreate(String rref, userData) async {
    // the rref is student or techer or parent or admin
    try {
      final allStudents = await real.ref("Users").child(rref).once();
      int num_s = allStudents.snapshot.children.length;
      log(num_s.toString());
      real
          .ref("Users")
          .child(rref)
          .child("${rref[0]}${(num_s + 1).toString()}")
          .set(userData);
    } catch (e) {
      log(e.toString());
    }
  }


//////////////////////////////////////////////////////////////////////////////////////////

    fiRead_ForLogin(String input, String password) async {
    try {
      // Trim the input and password
      input = input.replaceAll(' ', ''); //.replaceAll(' ', '')
      password = password.replaceAll(' ', '');
      log("input $input / $password");

      // Fetch data from Firebase Realtime Database
      final allData = await real.ref("Users").once();

      // Check if the data is not null
      if (allData.snapshot.value != null) {
        Map<dynamic, dynamic> data =
            allData.snapshot.value as Map<dynamic, dynamic>;

        // Function to check credentials within a specific category
        List<Object>? checkCredentials(
            Map<dynamic, dynamic> categoryData, String userType) {
          // log(categoryData.toString());
          for (var key in categoryData.keys) {
            String email = (categoryData[key]['email'] ?? '')
                .toString()
                .replaceAll(' ', '');
            String phone = (categoryData[key]['phone'] ?? '')
                .toString()
                .replaceAll(' ', '');
            String storedPassword = (categoryData[key]['password'] ?? '')
                .toString()
                .replaceAll(' ', '');
            log("data $email / $phone / $storedPassword");

            if ((email == input || phone == input) &&
                storedPassword == password) {
              log('Login successful as $userType: $key');
              return [
                true,
                '$userType-$key',
                '${categoryData[key]['state']}',
                '${categoryData[key]['name']}-${categoryData[key]['grade']}'
              ];
            }
          }
          return null;
        }

        // Check Students data
        if (data['Students'] != null) {
          var result = checkCredentials(data['Students'], 'Student');
          if (result != null) return result;
        }

        // Check Parents data
        if (data['Parent'] != null) {
          var result = checkCredentials(data['Parent'], 'Parent');
          if (result != null) return result;
        }

        // Check Teachers data
        if (data['Teacher'] != null) {
          var result = checkCredentials(data['Teacher'], 'Teacher');
          if (result != null) return result;
        }
        if (data['Admin'] != null) {
          var result = checkCredentials(data['Admin'], 'Admin');
          if (result != null) return result;
        }

        // If no user was found
        log('Login failed: Invalid email/phone or password');
        return [false, 'Login failed: Invalid email/phone or password'];
      } else {
        log('Error: Data is null');
        return [false, 'Error: Data is null'];
      }
    } catch (e) {
      log(e.toString());
      return [false, e.toString()];
    }
  }


class MyWidgetState extends State<MyWidget> {
  List<List<dynamic>> all_rec = [];

  @override
  void initState() {
    super.initState();
    fetchRecords();
  }

  Future<void> fetchRecords() async {
    // Perform async work outside setState
    List<List<dynamic>> records = await dbService.fiRead_Records(
        grade, "${Subjects[GradesSubjects[grade][index]][1]}");

    // Update state synchronously inside setState
    setState(() {
      all_rec = records;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: all_rec.isEmpty
          ? CircularProgressIndicator()
          : ListView.builder(
              itemCount: all_rec.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(all_rec[index][0]),
                  subtitle: Text(all_rec[index][1]),
                );
              },
            ),
    );
  }
}
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();

  // Example data
  final homeworkData = [
    {
      'grade': 'grade1',
      'subject': 'math',
      'homeworkId': 'homeworkId1',
      'title': 'Solve for X',
      'score': 85,
      'feedback': 'Great work! Keep practicing.',
      'studentAnswers': [
        {
          'studentId': 'studentId1',
          'answer': 'x = 5',
          'imageUrl': 'https://example.com/student1_answer.jpg',
        },
        {
          'studentId': 'studentId2',
          'answer': 'x = 7',
          'imageUrl': 'https://example.com/student2_answer.jpg',
        },
      ],
    },
    // Add more homework data here...
  ];

  // Store homework data in Firestore
  final firestore = FirebaseFirestore.instance;
  for (final homework in homeworkData) {
    final grade = homework['grade'];
    final subject = homework['subject'];
    final homeworkId = homework['homeworkId'];
    final title = homework['title'];
    final score = homework['score'];
    final feedback = homework['feedback'];
    final studentAnswers = homework['studentAnswers'];

    await firestore
        .collection('homework')
        .doc(grade)
        .collection(subject)
        .doc(homeworkId)
        .set({
      'title': title,
      'score': score,
      'feedback': feedback,
      'studentAnswers': studentAnswers,
    });
  }

  print('Homework data stored successfully!');
}

// Example class to represent a student answer
class StudentAnswer {
  final String studentId;
  final String answer;
  final String imageUrl;

  StudentAnswer({
    required this.studentId,
    required this.answer,
    required this.imageUrl,
  });

  Map<String, dynamic> toMap() {
    return {
      'studentId': studentId,
      'answer': answer,
      'imageUrl': imageUrl,
    };
  }
}
// homework
//   |
//   --- grade1
//       |
//       --- math
//           |
//           --- homeworkId1
//               |
//               --- title: "Solve for X"
//               --- feedback: "Great work! Keep practicing."
//               --- studentAnswers: 
//                   |
//                   --- studentId1: 
//                       |
//                       --- answer: "x = 5"
//                       --- imageUrl: "https://example.com/student1_answer.jpg"
//                       --- score: null  // Score is initially null
//                   |
//                   --- studentId2: 
//                       |
//                       --- answer: "x = 7"
//                       --- imageUrl: "https://example.com/student2_answer.jpg"
//                       --- score: null  // Score is initially null
//           |
//           --- homeworkId2: ...
//       |
//       --- science
//           |
//           --- homeworkId1: ...
//       |
//       --- ...
//   |
//   --- grade2
//       |
//       --- ...
//   |
//   --- grade3
//       |
//       --- ...
import '/flutter_flow/flutter_flow_animations.dart';
import '/flutter_flow/flutter_flow_pdf_viewer.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/flutter_flow/flutter_flow_widgets.dart';
import '/flutter_flow/upload_data.dart';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';

import 'home_page_model.dart';
export 'home_page_model.dart';

class HomePageWidget extends StatefulWidget {
  const HomePageWidget({super.key});

  @override
  State<HomePageWidget> createState() => _HomePageWidgetState();
}

class _HomePageWidgetState extends State<HomePageWidget>
    with TickerProviderStateMixin {
  late HomePageModel _model;

  final scaffoldKey = GlobalKey<ScaffoldState>();

  final animationsMap = <String, AnimationInfo>{};

  @override
  void initState() {
    super.initState();
    _model = createModel(context, () => HomePageModel());

    animationsMap.addAll({
      'circleImageOnPageLoadAnimation': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          ScaleEffect(
            curve: Curves.easeIn,
            delay: 0.0.ms,
            duration: 600.0.ms,
            begin: Offset(1.0, 1.0),
            end: Offset(1.0, 1.0),
          ),
        ],
      ),
    });
  }

  @override
  void dispose() {
    _model.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => _model.unfocusNode.canRequestFocus
          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
          : FocusScope.of(context).unfocus(),
      child: Scaffold(
        key: scaffoldKey,
        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
        body: SafeArea(
          top: true,
          child: Container(
            width: double.infinity,
            height: double.infinity,
            decoration: BoxDecoration(
              color: FlutterFlowTheme.of(context).secondaryBackground,
              borderRadius: BorderRadius.only(
                bottomLeft: Radius.circular(0),
                bottomRight: Radius.circular(0),
                topLeft: Radius.circular(0),
                topRight: Radius.circular(0),
              ),
            ),
            alignment: AlignmentDirectional(0, 0),
            child: Column(
              mainAxisSize: MainAxisSize.max,
              children: [
                Align(
                  alignment: AlignmentDirectional(0, -1),
                  child: Padding(
                    padding: EdgeInsets.all(22),
                    child: InkWell(
                      splashColor: Colors.transparent,
                      focusColor: Colors.transparent,
                      hoverColor: Colors.transparent,
                      highlightColor: Colors.transparent,
                      onTap: () async {
                        final selectedMedia =
                            await selectMediaWithSourceBottomSheet(
                          context: context,
                          allowPhoto: true,
                        );
                        if (selectedMedia != null &&
                            selectedMedia.every((m) =>
                                validateFileFormat(m.storagePath, context))) {
                          setState(() => _model.isDataUploading1 = true);
                          var selectedUploadedFiles = <FFUploadedFile>[];

                          try {
                            selectedUploadedFiles = selectedMedia
                                .map((m) => FFUploadedFile(
                                      name: m.storagePath.split('/').last,
                                      bytes: m.bytes,
                                      height: m.dimensions?.height,
                                      width: m.dimensions?.width,
                                      blurHash: m.blurHash,
                                    ))
                                .toList();
                          } finally {
                            _model.isDataUploading1 = false;
                          }
                          if (selectedUploadedFiles.length ==
                              selectedMedia.length) {
                            setState(() {
                              _model.uploadedLocalFile1 =
                                  selectedUploadedFiles.first;
                            });
                          } else {
                            setState(() {});
                            return;
                          }
                        }
                      },
                      child: Container(
                        width: 120,
                        height: 120,
                        clipBehavior: Clip.antiAlias,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                        ),
                        child: Image.memory(
                          _model.uploadedLocalFile1.bytes ??
                              Uint8List.fromList([]),
                          fit: BoxFit.cover,
                        ),
                      ),
                    ).animateOnPageLoad(
                        animationsMap['circleImageOnPageLoadAnimation']!),
                  ),
                ),
                FFButtonWidget(
                  onPressed: () async {
                    final selectedFiles = await selectFiles(
                      allowedExtensions: ['pdf'],
                      multiFile: false,
                    );
                    if (selectedFiles != null) {
                      setState(() => _model.isDataUploading2 = true);
                      var selectedUploadedFiles = <FFUploadedFile>[];

                      try {
                        selectedUploadedFiles = selectedFiles
                            .map((m) => FFUploadedFile(
                                  name: m.storagePath.split('/').last,
                                  bytes: m.bytes,
                                ))
                            .toList();
                      } finally {
                        _model.isDataUploading2 = false;
                      }
                      if (selectedUploadedFiles.length ==
                          selectedFiles.length) {
                        setState(() {
                          _model.uploadedLocalFile2 =
                              selectedUploadedFiles.first;
                        });
                      } else {
                        setState(() {});
                        return;
                      }
                    }
                  },
                  text: 'Button',
                  options: FFButtonOptions(
                    height: 40,
                    padding: EdgeInsetsDirectional.fromSTEB(24, 0, 24, 0),
                    iconPadding: EdgeInsetsDirectional.fromSTEB(0, 0, 0, 0),
                    color: FlutterFlowTheme.of(context).primary,
                    textStyle: FlutterFlowTheme.of(context).titleSmall.override(
                          fontFamily: 'Readex Pro',
                          color: Colors.white,
                          letterSpacing: 0,
                        ),
                    elevation: 3,
                    borderSide: BorderSide(
                      color: Colors.transparent,
                      width: 1,
                    ),
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                FlutterFlowPdfViewer(
                  networkPath: 'http://www.pdf995.com/samples/pdf.pdf',
                  height: 508,
                  horizontalScroll: false,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}



name: edu_academy
description: A new Flutter project.

environment:
  sdk: ">=3.0.0 <4.0.0"

dependencies:
  flutter:
    sdk: flutter
  auto_size_text: 3.0.0
  cached_network_image: 3.3.1
  collection: 1.18.0
  file_picker: 8.0.3
  flutter_animate: 4.5.0
  flutter_cache_manager: 3.3.1
  flutter_plugin_android_lifecycle: 2.0.20
  font_awesome_flutter: 10.6.0
  from_css_color: 2.0.0
  go_router: 12.1.3
  google_fonts: 6.1.0
  image_picker: 1.0.4
  image_picker_android: 0.8.8
  image_picker_for_web: 3.0.1
  image_picker_ios: 0.8.8+2
  image_picker_platform_interface: 2.9.1
  internet_file: 1.2.0
  intl: 0.19.0
  json_path: 0.7.2
  mime_type: 1.0.0
  page_transition: 2.1.0
  path_provider: 2.1.3
  path_provider_android: 2.2.5
  path_provider_foundation: 2.4.0
  path_provider_platform_interface: 2.1.2
  pdfx: 2.6.0
  plugin_platform_interface: 2.1.8
  provider: 6.1.2
  shared_preferences: 2.2.2
  shared_preferences_android: 2.2.1
  shared_preferences_foundation: 2.3.4
  shared_preferences_platform_interface: 2.3.1
  shared_preferences_web: 2.2.1
  sqflite: 2.2.6
  timeago: 3.6.1
  url_launcher: 6.2.5
  url_launcher_android: 6.3.0
  url_launcher_ios: 6.2.5
  url_launcher_platform_interface: 2.3.2
  video_player: 2.8.6
  video_player_android: 2.4.16
  video_player_avfoundation: 2.6.1
  video_player_platform_interface: 6.2.2
  video_player_web: 2.3.1


dev_dependencies:
  flutter_lints: 4.0.0
  lints: 4.0.0

  flutter_test:
    sdk: flutter

flutter:
  uses-material-design: true
  assets:
    - assets/images/
    - assets/videos/
    - assets/audios/
    - assets/lottie_animations/
    - assets/rive_animations/
    - assets/pdfs/
  





name

Teacher_Id
SubjectThatIsSelected
ListOfGrades[GradeHomeWorkOppenedIndex][0]

Files_List
HomeworkTitle
HomeworkBody








